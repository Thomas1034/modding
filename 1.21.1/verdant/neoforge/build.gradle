
plugins {
    id 'multiloader-loader'
    id 'net.neoforged.moddev'
    // handles asset image creation for the wiki
    id 'org.moddedmc.wiki.toolkit' version '0.2.5'
}

dependencies {
    // ModDevGradle
    // Version list: https://maven.sinytra.org/org/sinytra/item-asset-export-neoforge
    // runtimeOnly
    implementation "org.sinytra:item-asset-export-neoforge:1.1.0+1.21.4"
}

neoForge {
    version = neoforge_version
    // Automatically enable neoforge AccessTransformers if the file exists
    def at = project(':common').file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformers.from(at.absolutePath)
    }
    parchment {
        minecraftVersion = parchment_minecraft
        mappingsVersion = parchment_version
    }
    runs {
        configureEach {
            systemProperty('neoforge.enabledGameTestNamespaces', mod_id)
            ideName = "NeoForge ${it.name.capitalize()} (${project.path})" // Unify the run config names with fabric
        }
        client {
            client()
        }
        data {
            clientData()
            programArguments.addAll '--mod', project.mod_id, '--output', file('../common/src/generated/resources/').getAbsolutePath(), '--existing', file('../common/src/main/resources/').getAbsolutePath()
        }
        server {
            server()
        }
    }
    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }
}

wiki {
    docs {
        // The name of the object (verdant) should match the registered wiki project ID (if it exists).
        verdant {
            // The path to the folder containing the documentation metadata file (sinytra-wiki.json)
            root = file('docs/verdant')
            // Namespaces of registered in-game item IDs that you wish to include in the asset export
            // for this documentation root.
            exportedAssetNamespaces = ['verdant']
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }
